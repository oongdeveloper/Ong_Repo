from keras.models import load_model
from helpers import resize_to_fit
from imutils import paths
import numpy as np
import imutils
import cv2
import pickle
from selenium import webdriver
import time

import json
from selenium.webdriver.common.by import By
# WebDriverWait는 Selenium 2.4.0 이후 부터 사용 가능합니다.
from selenium.webdriver.support.ui import WebDriverWait
# expected_conditions는 Selenium 2.26.0 이후 부터 사용 가능합니다.
from selenium.webdriver.support import expected_conditions as EC


import os
import random
from bs4 import BeautifulSoup
from PIL import Image
from PIL import ImageDraw
from PIL import ImageFont
from pytesseract import image_to_string


driver = webdriver.Chrome()
driver.implicitly_wait(3)

MODEL_FILENAME = "captcha_model.hdf5"
MODEL_LABELS_FILENAME = "model_labels.dat"
#CAPTCHA_IMAGE_FOLDER = "generated_captcha_images"
CAPTCHA_IMAGE_FOLDER = "captcha"

# Load up the model labels (so we can translate model predictions to actual letters)
with open(MODEL_LABELS_FILENAME, "rb") as f:
    lb = pickle.load(f)

# Load the trained neural network
model = load_model(MODEL_FILENAME)

# Grab some random CAPTCHA images to test against.
# In the real world, you'd replace this section with code to grab a real
# CAPTCHA image from a live website.
# Thumbs 파일 가져오지 않음!!!!!!!!!
#captcha_image_files = list(paths.list_images(CAPTCHA_IMAGE_FOLDER))
captcha_image_files = paths.list_images(CAPTCHA_IMAGE_FOLDER)
captcha_image_files = list(captcha_image_files)
image_file = captcha_image_files[0]
#captcha_image_files = np.random.choice(captcha_image_files, size=(5,), replace=False)

#fw = open('html.txt','w')
#fw.write(driver.page_source)
#fw.write(element.source)
#element.get_attribute('innerHTML')
def driver_get():
	'''driver.get("https://www.interpark.com/member/login.do?_method=initial&GNBLogin=Y&&wid1=wgnb&wid2=wel_login&wid3=login&imfsUserPath=http%3A%2F%2Fwww.interpark.com%2Fmalls%2Findex.html%3FgateTp%3D1&historyGoCnt=-1")
	driver.implicitly_wait(3)
	'''
	#driver.switch_to.frame('subIframe')
	i = 0	
	driver.save_screenshot("./view/page" + 'test' +".png")
	#generate_captcha(location, size,str(i))
	generate_captcha('test')
	
	id = driver.find_element(By.ID,'memId')
	pwd = driver.find_element(By.ID,'pwd')
	captcha_field = driver.find_element(By.ID,'oCheckCaptcha')
	
	id.clear()
	id.send_keys('oong18')
	pwd.clear()
	pwd.send_keys('queen5800')
	
	result = "fail"
	while(True):
		driver.save_screenshot("./view/page" + 'test' +".png")
		#generate_captcha(location, size,str(i))
		generate_captcha('test')
		result = solve_captcha()
		if (result != 'fail' or i>5):
			break
		
		i += 1
		print (i)
		driver.find_element_by_xpath('//div[@class="refresh"]/button').click()

	captcha_field.clear()
	captcha_field.send_keys(result)
	driver.find_element_by_xpath('//div[@class="loginBtn"]/button').click()
	sleep_time = random.randrange(0,5)
	time.sleep(5)
	print (sleep_time)
	
	#driver.find_element_by_xpath('//div[@class="refresh"]/button').click()
	
def login_check(i):
	lCheck = True
	print ("login Check 중입니다..")
	try:
		element = driver.find_element_by_xpath('//p[@id="imgMsg"]')
		print (element.text)
		#if (element.text == '자동입력방지 문자를 잘못 입력하셨습니다.'or element.text =="" or i > 3):
		if (i > 3):
			lCheck = False
			print ("End")
	except Exception as e:
		lCheck = False
		print ("예외 발생 : ",e)
		
	return lCheck
	

def generate_captcha(path):
	'''Parameters:
        PATH - path to where captha image will be stored
    Description:
        using PIL, generate captcha image and its value and return them.
        generated captha image is not encrypted,
        this module simply generate a image for the random character value
        if you want to encrypting captcha library,
        you should find other library like python-recaptcha or something.
    '''
	
	img = Image.open("./view/page" + path +".png")
	#area = (location['y'], location['x'],size['width'],size['height'])
	#area = (location['x'],location['y'],location['x']+size['width'],location['y']+size['height'])
	
	#area = (39,337,192,378)
	area = (152,337,304,377)
	img = img.convert('RGB')

	cropped_img = img.crop(area)
	
	#draw.text((5, 1), value, font=font, fill=col)
	#im = im.rotate(15, expand =1)
	
	cropped_img.save('./captcha/captcha' + path+'.jpg')	

def solve_captcha():
	result = 'fail'
	# loop over the image paths
	
	#for image_file in captcha_image_files:
	
	# Load the image and convert it to grayscale
	image = cv2.imread(image_file)
	image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

	# Add some extra padding around the image
	#image = cv2.copyMakeBorder(image, 20, 20, 20, 20, cv2.BORDER_REPLICATE)

	# threshold the image (convert it to pure black and white)
	thresh = cv2.threshold(image, 0, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)[1]

	# find the contours (continuous blobs of pixels) the image
	contours = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

	# Hack for compatibility with different OpenCV versions
	contours = contours[0] if imutils.is_cv2() else contours[1]
	letter_image_regions = []
	# Now we can loop through each of the four contours and extract the letter
	# inside of each one

	for contour in contours:
	# Get the rectangle that contains the contour
		(x, y, w, h) = cv2.boundingRect(contour)
		letter_image_regions.append((x, y, w, h))
		# Compare the width and height of the contour to detect letters that
		# are conjoined into one chunk
		'''
		if w / h > 1.25:
			# This contour is too wide to be a single letter!
			# Split it in half into two letter regions!
			half_width = int(w / 2)
			letter_image_regions.append((x, y, half_width, h))
			letter_image_regions.append((x + half_width, y, half_width, h))
		else:
			# This is a normal letter by itself
			letter_image_regions.append((x, y, w, h))
		'''
	# If we found more or less than 4 letters in the captcha, our letter extraction
	# didn't work correcly. Skip the image instead of saving bad training data!

	if len(letter_image_regions) == 6:

		# Sort the detected letter images based on the x coordinate to make sure
		# we are processing them from left-to-right so we match the right image
		# with the right letter
		letter_image_regions = sorted(letter_image_regions, key=lambda x: x[0])

		# Create an output image and a list to hold our predicted letters
		output = cv2.merge([image] * 3)
		predictions = []

		# loop over the lektters
		for letter_bounding_box in letter_image_regions:
			# Grab the coordinates of the letter in the image
			x, y, w, h = letter_bounding_box

			# Extract the letter from the original image with a 2-pixel margin around the edge
			letter_image = image[y - 2:y + h + 2, x - 2:x + w + 2]

			# Re-size the letter image to 20x20 pixels to match training data
			letter_image = resize_to_fit(letter_image, 20, 20)

			# Turn the single image into a 4d list of images to make Keras happy
			letter_image = np.expand_dims(letter_image, axis=2)
			letter_image = np.expand_dims(letter_image, axis=0)

			# Ask the neural network to make a prediction
			prediction = model.predict(letter_image)

			# Convert the one-hot-encoded prediction back to a normal letter
			letter = lb.inverse_transform(prediction)[0]
			predictions.append(letter)

			# draw the prediction on the output image
			cv2.rectangle(output, (x - 2, y - 2), (x + w + 4, y + h + 4), (0, 255, 0), 1)
			cv2.putText(output, letter, (x - 5, y - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.55, (0, 255, 0), 2)

		# Print the captcha's text
		captcha_text = "".join(predictions)
		print("CAPTCHA text is: {}".format(captcha_text))
		result = captcha_text
		# Show the annotated image
		cv2.imshow("Output", output)
		cv2.waitKey(5000)
		cv2.destroyAllWindows()
	
	return result
		
		
if __name__ == '__main__':
	#for i in range(0,500):
	i = 0
	driver.get("https://www.interpark.com/member/login.do?_method=initial&GNBLogin=Y&&wid1=wgnb&wid2=wel_login&wid3=login&imfsUserPath=http%3A%2F%2Fwww.interpark.com%2Fmalls%2Findex.html%3FgateTp%3D1&historyGoCnt=-1")
	driver.switch_to.frame('subIframe')
	while login_check(i):
		driver_get()
		i+=1
	
	time.sleep(1)
	driver.close()
	
